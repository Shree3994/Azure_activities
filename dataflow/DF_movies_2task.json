{
	"name": "DF_movies_2task",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DSsourcesql",
						"type": "DatasetReference"
					},
					"name": "moviesource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DSsinkmovieproject",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie_id as integer,",
				"          title as string,",
				"          genres as string,",
				"          year as integer,",
				"          rating as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> moviesource",
				"moviesource filter(year >= 1910 && year <= 2000 && rlike(genres, \"Comedy\")) ~> filter1",
				"filter1 aggregate(groupBy(year),",
				"     AvgRating = avg(rating)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EMPLOYEE_ID as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          EMAIL as string,",
				"          PHONE_NUMBER as string,",
				"          HIRE_DATE as string,",
				"          JOB_ID as string,",
				"          SALARY as string,",
				"          COMMISSION_PCT as string,",
				"          MANAGER_ID as string,",
				"          DEPARTMENT_ID as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}